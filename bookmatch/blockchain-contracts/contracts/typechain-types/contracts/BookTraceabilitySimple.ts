/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BookTraceabilitySimple {
  export type BookStruct = {
    bookId: string;
    title: string;
    currentOwner: AddressLike;
    registrationTime: BigNumberish;
  };

  export type BookStructOutput = [
    bookId: string,
    title: string,
    currentOwner: string,
    registrationTime: bigint
  ] & {
    bookId: string;
    title: string;
    currentOwner: string;
    registrationTime: bigint;
  };

  export type TransferStruct = {
    from: AddressLike;
    to: AddressLike;
    timestamp: BigNumberish;
  };

  export type TransferStructOutput = [
    from: string,
    to: string,
    timestamp: bigint
  ] & { from: string; to: string; timestamp: bigint };
}

export interface BookTraceabilitySimpleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "books"
      | "getBook"
      | "getBooksByOwner"
      | "getTransferHistory"
      | "registerBook"
      | "totalBooks"
      | "transferHistory"
      | "transferOwnership"
      | "verifyOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BookRegistered" | "BookTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "books", values: [string]): string;
  encodeFunctionData(functionFragment: "getBook", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBooksByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBook",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBooks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferHistory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOwnership",
    values: [string, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "books", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBooksByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalBooks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyOwnership",
    data: BytesLike
  ): Result;
}

export namespace BookRegisteredEvent {
  export type InputTuple = [
    bookId: string,
    title: string,
    owner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    bookId: string,
    title: string,
    owner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    bookId: string;
    title: string;
    owner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookTransferredEvent {
  export type InputTuple = [
    bookId: string,
    from: AddressLike,
    to: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    bookId: string,
    from: string,
    to: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    bookId: string;
    from: string;
    to: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BookTraceabilitySimple extends BaseContract {
  connect(runner?: ContractRunner | null): BookTraceabilitySimple;
  waitForDeployment(): Promise<this>;

  interface: BookTraceabilitySimpleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  books: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint] & {
        bookId: string;
        title: string;
        currentOwner: string;
        registrationTime: bigint;
      }
    ],
    "view"
  >;

  getBook: TypedContractMethod<
    [_bookId: string],
    [BookTraceabilitySimple.BookStructOutput],
    "view"
  >;

  getBooksByOwner: TypedContractMethod<
    [_owner: AddressLike],
    [string[]],
    "view"
  >;

  getTransferHistory: TypedContractMethod<
    [_bookId: string],
    [BookTraceabilitySimple.TransferStructOutput[]],
    "view"
  >;

  registerBook: TypedContractMethod<
    [_bookId: string, _title: string],
    [void],
    "nonpayable"
  >;

  totalBooks: TypedContractMethod<[], [bigint], "view">;

  transferHistory: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint] & { from: string; to: string; timestamp: bigint }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [_bookId: string, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyOwnership: TypedContractMethod<
    [_bookId: string, _address: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "books"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint] & {
        bookId: string;
        title: string;
        currentOwner: string;
        registrationTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBook"
  ): TypedContractMethod<
    [_bookId: string],
    [BookTraceabilitySimple.BookStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBooksByOwner"
  ): TypedContractMethod<[_owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransferHistory"
  ): TypedContractMethod<
    [_bookId: string],
    [BookTraceabilitySimple.TransferStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerBook"
  ): TypedContractMethod<
    [_bookId: string, _title: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalBooks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferHistory"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint] & { from: string; to: string; timestamp: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [_bookId: string, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyOwnership"
  ): TypedContractMethod<
    [_bookId: string, _address: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "BookRegistered"
  ): TypedContractEvent<
    BookRegisteredEvent.InputTuple,
    BookRegisteredEvent.OutputTuple,
    BookRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "BookTransferred"
  ): TypedContractEvent<
    BookTransferredEvent.InputTuple,
    BookTransferredEvent.OutputTuple,
    BookTransferredEvent.OutputObject
  >;

  filters: {
    "BookRegistered(string,string,address,uint256)": TypedContractEvent<
      BookRegisteredEvent.InputTuple,
      BookRegisteredEvent.OutputTuple,
      BookRegisteredEvent.OutputObject
    >;
    BookRegistered: TypedContractEvent<
      BookRegisteredEvent.InputTuple,
      BookRegisteredEvent.OutputTuple,
      BookRegisteredEvent.OutputObject
    >;

    "BookTransferred(string,address,address,uint256)": TypedContractEvent<
      BookTransferredEvent.InputTuple,
      BookTransferredEvent.OutputTuple,
      BookTransferredEvent.OutputObject
    >;
    BookTransferred: TypedContractEvent<
      BookTransferredEvent.InputTuple,
      BookTransferredEvent.OutputTuple,
      BookTransferredEvent.OutputObject
    >;
  };
}
