/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BookTraceability {
  export type TransferStruct = {
    from: AddressLike;
    to: AddressLike;
    timestamp: BigNumberish;
    notes: string;
  };

  export type TransferStructOutput = [
    from: string,
    to: string,
    timestamp: bigint,
    notes: string
  ] & { from: string; to: string; timestamp: bigint; notes: string };
}

export interface BookTraceabilityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBook"
      | "getBookByIndex"
      | "getBooksByOwner"
      | "getTotalBooks"
      | "getTransferHistory"
      | "isBookRegistered"
      | "owner"
      | "pause"
      | "paused"
      | "registerBook"
      | "renounceOwnership"
      | "transferOwnership(string,address,string)"
      | "transferOwnership(address)"
      | "unpause"
      | "updateMetadata"
      | "verifyOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BookMetadataUpdated"
      | "BookOwnershipTransferred"
      | "BookRegistered"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "getBook", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBookByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBooksByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBooks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBookRegistered",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerBook",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(string,address,string)",
    values: [string, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOwnership",
    values: [string, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "getBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBookByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBooksByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBookRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(string,address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyOwnership",
    data: BytesLike
  ): Result;
}

export namespace BookMetadataUpdatedEvent {
  export type InputTuple = [
    bookIdHash: BytesLike,
    bookId: string,
    updatedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    bookIdHash: string,
    bookId: string,
    updatedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    bookIdHash: string;
    bookId: string;
    updatedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookOwnershipTransferredEvent {
  export type InputTuple = [
    bookIdHash: BytesLike,
    bookId: string,
    from: AddressLike,
    to: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    bookIdHash: string,
    bookId: string,
    from: string,
    to: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    bookIdHash: string;
    bookId: string;
    from: string;
    to: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookRegisteredEvent {
  export type InputTuple = [
    bookIdHash: BytesLike,
    bookId: string,
    title: string,
    owner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    bookIdHash: string,
    bookId: string,
    title: string,
    owner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    bookIdHash: string;
    bookId: string;
    title: string;
    owner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BookTraceability extends BaseContract {
  connect(runner?: ContractRunner | null): BookTraceability;
  waitForDeployment(): Promise<this>;

  interface: BookTraceabilityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBook: TypedContractMethod<
    [_bookId: string],
    [
      [string, string, string, string, string, bigint, bigint, string] & {
        bookId: string;
        isbn: string;
        title: string;
        author: string;
        currentOwner: string;
        registeredAt: bigint;
        lastUpdated: bigint;
        metadata: string;
      }
    ],
    "view"
  >;

  getBookByIndex: TypedContractMethod<
    [_index: BigNumberish],
    [
      [string, string, string, string] & {
        bookId: string;
        title: string;
        author: string;
        currentOwner: string;
      }
    ],
    "view"
  >;

  getBooksByOwner: TypedContractMethod<
    [_owner: AddressLike],
    [string[]],
    "view"
  >;

  getTotalBooks: TypedContractMethod<[], [bigint], "view">;

  getTransferHistory: TypedContractMethod<
    [_bookId: string],
    [BookTraceability.TransferStructOutput[]],
    "view"
  >;

  isBookRegistered: TypedContractMethod<[_bookId: string], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerBook: TypedContractMethod<
    [
      _bookId: string,
      _isbn: string,
      _title: string,
      _author: string,
      _metadata: string
    ],
    [string],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "transferOwnership(string,address,string)": TypedContractMethod<
    [_bookId: string, _newOwner: AddressLike, _notes: string],
    [void],
    "nonpayable"
  >;

  "transferOwnership(address)": TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateMetadata: TypedContractMethod<
    [_bookId: string, _metadata: string],
    [void],
    "nonpayable"
  >;

  verifyOwnership: TypedContractMethod<
    [_bookId: string, _address: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBook"
  ): TypedContractMethod<
    [_bookId: string],
    [
      [string, string, string, string, string, bigint, bigint, string] & {
        bookId: string;
        isbn: string;
        title: string;
        author: string;
        currentOwner: string;
        registeredAt: bigint;
        lastUpdated: bigint;
        metadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBookByIndex"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [
      [string, string, string, string] & {
        bookId: string;
        title: string;
        author: string;
        currentOwner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBooksByOwner"
  ): TypedContractMethod<[_owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalBooks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransferHistory"
  ): TypedContractMethod<
    [_bookId: string],
    [BookTraceability.TransferStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBookRegistered"
  ): TypedContractMethod<[_bookId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerBook"
  ): TypedContractMethod<
    [
      _bookId: string,
      _isbn: string,
      _title: string,
      _author: string,
      _metadata: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership(string,address,string)"
  ): TypedContractMethod<
    [_bookId: string, _newOwner: AddressLike, _notes: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership(address)"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMetadata"
  ): TypedContractMethod<
    [_bookId: string, _metadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyOwnership"
  ): TypedContractMethod<
    [_bookId: string, _address: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "BookMetadataUpdated"
  ): TypedContractEvent<
    BookMetadataUpdatedEvent.InputTuple,
    BookMetadataUpdatedEvent.OutputTuple,
    BookMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BookOwnershipTransferred"
  ): TypedContractEvent<
    BookOwnershipTransferredEvent.InputTuple,
    BookOwnershipTransferredEvent.OutputTuple,
    BookOwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "BookRegistered"
  ): TypedContractEvent<
    BookRegisteredEvent.InputTuple,
    BookRegisteredEvent.OutputTuple,
    BookRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BookMetadataUpdated(bytes32,string,address,uint256)": TypedContractEvent<
      BookMetadataUpdatedEvent.InputTuple,
      BookMetadataUpdatedEvent.OutputTuple,
      BookMetadataUpdatedEvent.OutputObject
    >;
    BookMetadataUpdated: TypedContractEvent<
      BookMetadataUpdatedEvent.InputTuple,
      BookMetadataUpdatedEvent.OutputTuple,
      BookMetadataUpdatedEvent.OutputObject
    >;

    "BookOwnershipTransferred(bytes32,string,address,address,uint256)": TypedContractEvent<
      BookOwnershipTransferredEvent.InputTuple,
      BookOwnershipTransferredEvent.OutputTuple,
      BookOwnershipTransferredEvent.OutputObject
    >;
    BookOwnershipTransferred: TypedContractEvent<
      BookOwnershipTransferredEvent.InputTuple,
      BookOwnershipTransferredEvent.OutputTuple,
      BookOwnershipTransferredEvent.OutputObject
    >;

    "BookRegistered(bytes32,string,string,address,uint256)": TypedContractEvent<
      BookRegisteredEvent.InputTuple,
      BookRegisteredEvent.OutputTuple,
      BookRegisteredEvent.OutputObject
    >;
    BookRegistered: TypedContractEvent<
      BookRegisteredEvent.InputTuple,
      BookRegisteredEvent.OutputTuple,
      BookRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
