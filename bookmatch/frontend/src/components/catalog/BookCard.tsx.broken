import { useState } from 'react';
import {
  CardMedia,
  CardContent,
  Button,
  Chip,
  Typography,
  Box,
  Paper,
  Stack,
  IconButton,
  Menu,
  MenuItem,
  ListItemIcon,
  ListItemText,
} from '@mui/material';
import {
  ShoppingCart as CartIcon,
  MoreVert as MoreIcon,
  Link as LinkIcon,
  Add as AddIcon,
} from '@mui/icons-material';
import { CatalogBook } from '../../types/catalog';
import { BookTraceability } from '../blockchain/BookTraceability';
import { RegisterBookDialog } from '../blockchain/RegisterBookDialog';

interface BookCardProps {
  book: CatalogBook;
  onAddToCart: (book: CatalogBook) => void;
  formatPrice: (price: number) => string;
}

const BookCard = ({ book, onAddToCart, formatPrice }: BookCardProps) => {
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [traceabilityOpen, setTraceabilityOpen] = useState(false);
  const [registerOpen, setRegisterOpen] = useState(false);
  const menuOpen = Boolean(anchorEl);

  const handleMenuClick = (event: React.MouseEvent<HTMLElement>) => {
    event.stopPropagation();
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const handleViewTraceability = () => {
    handleMenuClose();
    setTraceabilityOpen(true);
  };

  const handleRegisterBook = () => {
    handleMenuClose();
    setRegisterOpen(true);
  };

  return (
    <>
      <Paper
        elevation={2}
        sx={{
          height: '100%',
          display: 'flex',
          flexDirection: 'column',
          borderRadius: 2,
          overflow: 'hidden',
          transition: 'all 0.3s ease',
          '&:hover': {
            transform: 'translateY(-4px)',
            boxShadow: '0 6px 16px rgba(0,0,0,0.1)',
          },
        }}
      >
        <Box sx={{ position: 'relative', height: 250, overflow: 'hidden' }}>
          <IconButton
            onClick={handleMenuClick}
            sx={{
              position: 'absolute',
              top: 8,
              right: 8,
              bgcolor: 'rgba(255, 255, 255, 0.9)',
              backdropFilter: 'blur(4px)',
              zIndex: 1,
              '&:hover': {
                bgcolor: 'rgba(255, 255, 255, 1)',
              },
            }}
            size="small"
          >
            <MoreIcon fontSize="small" />
          </IconButton>

          <CardMedia
          component="div"
          sx={{
            height: '100%',
            backgroundImage: `url(${book.coverUrl})`,
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            filter: 'grayscale(100%)',
            transition: 'filter 0.3s ease',
            '&:hover': {
              filter: 'grayscale(70%)',
            },
            backgroundColor: 'grey.200',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: 'grey.500',
            fontSize: '0.875rem',
            fontWeight: 500,
          }}
        >
          {!book.coverUrl && 'Imagen no disponible'}
          </CardMedia>
        </Box>

        <CardContent sx={{ flexGrow: 1, p: 2 }}>
        <Stack spacing={1.5}>
          <Chip
            label={book.genre}
            size="small"
            sx={{
              alignSelf: 'flex-start',
              bgcolor: 'grey.100',
              color: 'text.primary',
              fontWeight: 500,
              fontSize: '0.7rem',
              height: 24,
              '& .MuiChip-label': {
                px: 1,
              },
            }}
          />
          
          <Box>
            <Typography 
              variant="subtitle1" 
              fontWeight={600} 
              sx={{
                display: '-webkit-box',
                WebkitLineClamp: 2,
                WebkitBoxOrient: 'vertical',
                overflow: 'hidden',
                minHeight: '2.8em',
                mb: 0.5,
              }}
            >
              {book.title}
            </Typography>
            <Typography 
              variant="body2" 
              color="text.secondary" 
              sx={{
                fontSize: '0.85rem',
                mb: 1,
              }}
            >
              {book.author}
            </Typography>
          </Box>
          
          <Box sx={{ mt: 'auto' }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1.5 }}>
              <Typography 
                variant="h6" 
                fontWeight={700} 
                color="primary.main"
                sx={{ fontSize: '1.1rem' }}
              >
                {formatPrice(book.price)}
              </Typography>
              <Chip
                label={`${book.stock} en stock`}
                size="small"
                variant="outlined"
                sx={{
                  borderWidth: 1,
                  borderStyle: 'solid',
                  borderColor: book.stock > 10 ? 'success.main' : book.stock > 5 ? 'warning.main' : 'error.main',
                  color: book.stock > 10 ? 'success.dark' : book.stock > 5 ? 'warning.dark' : 'error.dark',
                  bgcolor: book.stock > 10 ? 'success.light' : book.stock > 5 ? 'warning.light' : 'error.light',
                  fontSize: '0.7rem',
                  height: 22,
                }}
              />
            </Box>
            
            <Button
              fullWidth
              variant="contained"
              size="small"
              startIcon={<CartIcon fontSize="small" />}
              onClick={() => onAddToCart(book)}
              disabled={book.stock === 0}
              sx={{
                py: 1,
                borderRadius: 1.5,
                textTransform: 'none',
                fontWeight: 600,
                fontSize: '0.85rem',
                bgcolor: 'primary.main',
                '&:hover': {
                  bgcolor: 'primary.dark',
                },
                '&.Mui-disabled': {
                  bgcolor: 'grey.300',
                  color: 'grey.500',
                },
              }}
            >
              {book.stock > 0 ? 'Agregar al carrito' : 'Sin stock'}
            </Button>
          </Box>
        </Stack>
        </CardContent>
      </Paper>

      {/* Blockchain Menu */}
      <Menu
        anchorEl={anchorEl}
        open={menuOpen}
        onClose={handleMenuClose}
        anchorOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
      >
        <MenuItem onClick={handleViewTraceability}>
          <ListItemIcon>
            <LinkIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>Ver Trazabilidad</ListItemText>
        </MenuItem>
        <MenuItem onClick={handleRegisterBook}>
          <ListItemIcon>
            <AddIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>Registrar en Blockchain</ListItemText>
        </MenuItem>
      </Menu>

      {/* Traceability Dialog */}
      <BookTraceability
        open={traceabilityOpen}
        onClose={() => setTraceabilityOpen(false)}
        bookId={book.id}
        bookTitle={book.title}
      />

      {/* Register Book Dialog */}
      <RegisterBookDialog
        open={registerOpen}
        onClose={() => setRegisterOpen(false)}
        book={{
          id: book.id,
          title: book.title,
          author: book.author,
          isbn: book.isbn,
          coverUrl: book.coverUrl,
        }}
        onSuccess={(txHash) => {
          console.log('Book registered on blockchain:', txHash);
        }}
      />
    </>
  );
};

export default BookCard;
